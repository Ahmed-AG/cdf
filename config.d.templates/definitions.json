{
    "deployment" : {
        "cfn" : [
            {
                "project_name": "deploy",
                "security_checks": "true",
                "build_spec_phases": {
                    "install" : [
                        "aws --version"
                    ],
                    "pre_build" : [],
                    "build" : [
                        "PIPELINE_NAME=$(echo $PIPELINE | jq -r '.name')",
                        "SOURCE_BUCKET=$(aws cloudformation describe-stack-resources --stack-name cdf-$PIPELINE_NAME | jq -r '.StackResources[].PhysicalResourceId' |grep sourcebucket)",
                        "REGION=$(echo $PIPELINE | jq -r '.deployment.region')",
                        "TEMPLATE_FILE=$(echo $PIPELINE | jq -r '.deployment.deployment_file')",
                        "PARAMETERS=$(echo $PIPELINE | jq -r '.deployment.parameters')",
                        "CAPABILITIES=$(echo $PIPELINE | jq -r '.deployment.capabilities')",
                        "echo \"PIPELINE_NAME=\"$PIPELINE_NAME",
                        "echo \"SOURCE_BUCKET=\"$SOURCE_BUCKET",
                        "echo \"REGION=\"$REGION",
                        "echo \"TEMPLATE_FILE=\"$TEMPLATE_FILE",
                        "echo \"PARAMETERS=\"$PARAMETERS",
                        "echo \"CAPABILITIES=\"$CAPABILITIES",
                        "aws s3 sync . s3://$SOURCE_BUCKET",
                        "aws cloudformation deploy --stack-name $PIPELINE_NAME --template-file $TEMPLATE_FILE --parameter-overrides $PARAMETERS --capabilities $CAPABILITIES"
                    ],
                    "post_build" : []   
                }
            }
        ],
        "terraform" : 
        [
            {
                "project_name": "plan",
                "security_checks": "true",
                "build_spec_phases": {
                    "install" : [
                        "terraform --version"
                    ],
                    "pre_build" : [],
                    "build" : [
                        "PIPELINE_NAME=$(echo $PIPELINE | jq -r '.name')",
                        "SOURCE_BUCKET=$(aws cloudformation describe-stack-resources --stack-name cdf-$PIPELINE_NAME | jq -r '.StackResources[].PhysicalResourceId' |grep sourcebucket)",
                        "REGION=$(echo $PIPELINE | jq -r '.deployment.region')",
                        "DEPLOYMENT_FOLDER=$(echo $PIPELINE | jq -r '.deployment.deployment_folder')",
                        "PARAMETERS=$(echo $PIPELINE | jq -r '.deployment.parameters')",
                        "echo \"PIPELINE_NAME=\"$PIPELINE_NAME",
                        "echo \"SOURCE_BUCKET=\"$SOURCE_BUCKET",
                        "echo \"REGION=\"$REGION",
                        "echo \"DEPLOYMENT_FOLDER=\"$DEPLOYMENT_FOLDER",
                        "echo \"PARAMETERS=\"$PARAMETERS",
                        "cd $DEPLOYMENT_FOLDER",
                        "terraform init",
                        "terraform plan"
                    ],
                    "post_build" : []
                }
            },
            {
                "project_name": "apply",
                "security_checks": "false",
                "build_spec_phases": {
                    "install" : [
                        "terraform --version"
                    ],
                    "pre_build" : [],
                    "build" : [
                        "PIPELINE_NAME=$(echo $PIPELINE | jq -r '.name')",
                        "SOURCE_BUCKET=$(aws cloudformation describe-stack-resources --stack-name cdf-$PIPELINE_NAME | jq -r '.StackResources[].PhysicalResourceId' |grep sourcebucket)",
                        "REGION=$(echo $PIPELINE | jq -r '.deployment.region')",
                        "DEPLOYMENT_FOLDER=$(echo $PIPELINE | jq -r '.deployment.deployment_folder')",
                        "PARAMETERS=$(echo $PIPELINE | jq -r '.deployment.parameters')",
                        "echo \"PIPELINE_NAME=\"$PIPELINE_NAME",
                        "echo \"SOURCE_BUCKET=\"$SOURCE_BUCKET",
                        "echo \"REGION=\"$REGION",
                        "echo \"DEPLOYMENT_FOLDER=\"$DEPLOYMENT_FOLDER",
                        "echo \"PARAMETERS=\"$PARAMETERS",
                        "cd $DEPLOYMENT_FOLDER",
                        "terraform init",
                        "terraform apply --auto-approve"
                    ],
                    "post_build" : []
                }
            }
        ]
    },
    "checks" : {
        "general_all" : {
            "install" : [
                "mkdir /tmp/reports"
            ],
            "pre_build" : [
                "PIPELINE_NAME=$(echo $PIPELINE | jq -r '.name')",
                "REPORTS_BUCKET=$(aws cloudformation describe-stack-resources --stack-name cdf-$PIPELINE_NAME | jq -r '.StackResources[].PhysicalResourceId' |grep reportsbucket)",
                "echo \"REPORTS_BUCKET=\"$REPORTS_BUCKET",
                "STACK_NAME=CFN-$(echo $PIPELINE | jq -r '.name')",
                "echo \"STACK_NAME=\"$STACK_NAME"
            ],
            "post_build" : [
                "CURRENT_TIME=$(date +\"%S%M%H%m%d%y\")",
                "aws s3 cp /tmp/reports/* s3://$REPORTS_BUCKET/$STACK_NAME/$CURRENT_TIME/ || true"
            ]
        },
        "cfn_nag" : {
            "install" : [
                "cfn_nag -v"
            ],
            "pre_build" : [
                "TEMPLATE_FILE=$(echo $PIPELINE | jq -r '.deployment.deployment_file')",
                "echo \"TEMPLATE_FILE=\"$TEMPLATE_FILE",
                "cfn_nag_scan --input-path $TEMPLATE_FILE --output-format json > /tmp/reports/cfn_nag_output.json || true",
                "cat /tmp/reports/cfn_nag_output.json"
            ],
            "post_build" : []
        },
        "checkov" : {
            "install" : [
                "checkov --version"
            ],
            "pre_build" : [
                "checkov -d . -o junitxml --output-file-path /tmp/reports/ || true "
            ],
            "post_build" : []
        },
        "snyk" : {
            "install" : [
                "snyk --version"
            ],
            "pre_build" : [],
            "post_build" : []
        }
    }
}